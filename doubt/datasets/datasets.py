''' 
Collection of data sets for regression tasks, with data preparation pipelines. 
All data sets are from the UCI data set archive, with all the descriptions 
being the original descriptions verbatim.
'''

from ._dataset import BaseDataset

import pandas as pd
import zipfile
import io
import re

class AirfoilSelfNoise(BaseDataset):
    '''
    The NASA data set comprises different size NACA 0012 airfoils at various 
    wind tunnel speeds and angles of attack. The span of the airfoil and the 
    observer position were the same in all of the experiments.   

    Features:
        int: Frequency, in Hertzs
        float: Angle of attack, in degrees
        float: Chord length, in meters
        float: Free-stream velocity, in meters per second
        float: Suction side displacement thickness, in meters

    Targets:
        float: Scaled sound pressure level, in decibels
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Airfoil+Self-Noise 
     '''

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00291/airfoil_self_noise.dat'

    feats = range(5)
    trgts = [6]

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        df = pd.read_csv(data, sep = '\t')
        return df

class DailyBikeSharing(BaseDataset):
    '''
    Bike sharing systems are new generation of traditional bike rentals where 
    whole process from membership, rental and return back has become automatic.
    Through these systems, user is able to easily rent a bike from a 
    particular position and return back at another position. Currently, there 
    are about over 500 bike-sharing programs around the world which is 
    composed of over 500 thousands bicycles. Today, there exists great 
    interest in these systems due to their important role in traffic, 
    environmental and health issues.

    Apart from interesting real world applications of bike sharing systems, 
    the characteristics of data being generated by these systems make them 
    attractive for the research. Opposed to other transport services such as 
    bus or subway, the duration of travel, departure and arrival position is 
    explicitly recorded in these systems. This feature turns bike sharing 
    system into a virtual sensor network that can be used for sensing mobility 
    in the city. Hence, it is expected that most of important events in the 
    city could be detected via monitoring these data. 

    Features:
        instant (int): 
            Record index
        dteday (str): 
            The date
        season (int): 
            The season, with 1 = winter, 2 = spring, 3 = summer and 4 = autumn
        yr (int): 
            The year, with 0 = 2011 and 1 = 2012
        mnth (int): 
            The month, from 1 to 12 inclusive
        holiday (int): 
            Whether day is a holiday or not, binary valued
        weekday (int): 
            The day of the week, from 0 to 6 inclusive
        workingday (int): 
            Working day, 1 if day is neither weekend nor holiday, otherwise 0
        weathersit (int): Weather, encoded as follows:
            1: Clear, few clouds, partly cloudy
            2: Mist and cloudy, mist and broken clouds, mist and few clouds
            3: Light snow, light rain and thunderstorm and scattered clouds,
               light rain and scattered clouds
            4: Heavy rain and ice pallets and thunderstorm and mist, or snow
               and fog
        temp (float): 
            Max-min normalised temperature in Celsius, from -8 to +39
        atemp (float): 
            Max-min normalised feeling temperature in Celsius, from -16 to +50
        hum (float): 
            Scaled max-min normalised humidity, from 0 to 1
        windspeed (float): 
            Scaled max-min normalised wind speed, from 0 to 1

    Targets:
        casual (int): 
            Count of casual users
        registered (int): 
            Count of registered users
        cnt (int): 
            Sum of casual and registered users
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00275/Bike-Sharing-Dataset.zip'

    feats = range(13)
    trgts = [13, 14, 15]

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        # Convert the bytes into a file-like object
        buffer = io.BytesIO(data)

        # Unzip the file and pull out day.csv as a string
        with zipfile.ZipFile(buffer, 'r') as zip_file:
            csv = str(zip_file.read('day.csv'))

        # Fix a few quirks that arise when reading the data as a string
        csv = re.sub(r'\\r\\n', '\r\n', csv)
        csv = re.sub(r"b'|'", '', csv)

        # Convert the string into a file-like object
        csv_file = io.StringIO(csv)

        # Read the file-like object into a dataframe
        df = pd.read_csv(csv_file)
        return df

class HourlyBikeSharing(BaseDataset):
    '''
    Bike sharing systems are new generation of traditional bike rentals where 
    whole process from membership, rental and return back has become automatic.
    Through these systems, user is able to easily rent a bike from a 
    particular position and return back at another position. Currently, there 
    are about over 500 bike-sharing programs around the world which is 
    composed of over 500 thousands bicycles. Today, there exists great 
    interest in these systems due to their important role in traffic, 
    environmental and health issues.

    Apart from interesting real world applications of bike sharing systems, 
    the characteristics of data being generated by these systems make them 
    attractive for the research. Opposed to other transport services such as 
    bus or subway, the duration of travel, departure and arrival position is 
    explicitly recorded in these systems. This feature turns bike sharing 
    system into a virtual sensor network that can be used for sensing mobility 
    in the city. Hence, it is expected that most of important events in the 
    city could be detected via monitoring these data. 

    Features:
        instant (int): 
            Record index
        dteday (str): 
            The date
        season (int): 
            The season, with 1 = winter, 2 = spring, 3 = summer and 4 = autumn
        yr (int): 
            The year, with 0 = 2011 and 1 = 2012
        mnth (int): 
            The month, from 1 to 12 inclusive
        hr (int): 
            The hour of the day, from 0 to 23 inclusive
        holiday (int): 
            Whether day is a holiday or not, binary valued
        weekday (int): 
            The day of the week, from 0 to 6 inclusive
        workingday (int): 
            Working day, 1 if day is neither weekend nor holiday, otherwise 0
        weathersit (int): Weather, encoded as follows:
            1: Clear, few clouds, partly cloudy
            2: Mist and cloudy, mist and broken clouds, mist and few clouds
            3: Light snow, light rain and thunderstorm and scattered clouds,
               light rain and scattered clouds
            4: Heavy rain and ice pallets and thunderstorm and mist, or snow
               and fog
        temp (float): 
            Max-min normalised temperature in Celsius, from -8 to +39
        atemp (float): 
            Max-min normalised feeling temperature in Celsius, from -16 to +50
        hum (float): 
            Scaled max-min normalised humidity, from 0 to 1
        windspeed (float): 
            Scaled max-min normalised wind speed, from 0 to 1

    Targets:
        casual (int): 
            Count of casual users
        registered (int): 
            Count of registered users
        cnt (int): 
            Sum of casual and registered users
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00275/Bike-Sharing-Dataset.zip'

    feats = range(14)
    trgts = [14, 15, 16]

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        # Convert the bytes into a file-like object
        buffer = io.BytesIO(data)

        # Unzip the file and pull out hour.csv as a string
        with zipfile.ZipFile(buffer, 'r') as zip_file:
            csv = str(zip_file.read('hour.csv'))

        # Fix a few quirks that arise when reading the data as a string
        csv = re.sub(r'\\r\\n', '\r\n', csv)
        csv = re.sub(r"b'|'", '', csv)

        # Convert the string into a file-like object
        csv_file = io.StringIO(csv)

        # Read the file-like object into a dataframe
        df = pd.read_csv(csv_file)
        return df

class BlogFeedback(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/BlogFeedback 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00304/BlogFeedback.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class CarbonNanotubes(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Carbon+Nanotubes 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00448/carbon_nanotubes.csv'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class ConcreteCompressive(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'concrete/compressive/Concrete_Data.xls'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class CPUPerformance(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Computer+Hardware 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'cpu-performance/machine.data'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class CyclePowerPlant(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Combined+Cycle+Power+Plant 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00294/CCPP.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class FacebookComments(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Facebook+Comment+Volume+Dataset 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00363/Dataset.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class FacebookMetrics(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Facebook+metrics 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00368/Facebook_metrics.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class FishBioconcentration(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/QSAR+fish+bioconcentration
        +factor+%28BCF%29 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00511/QSAR_fish_BCF.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class FishToxicity(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/QSAR+fish+toxicity 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00504/qsar_fish_toxicity.csv'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class ForestFires(BaseDataset):
    ''' 
    This is a difficult regression task, where the aim is to predict the 
    burned area of forest fires, in the northeast region of Portugal, by 
    using meteorological and other data.

    Features:
        X (float): 
            The x-axis spatial coordinate within the Montesinho park map.
            Ranges from 1 to 9.
        Y (float): 
            The y-axis spatial coordinate within the Montesinho park map
            Ranges from 2 to 9.
        month (str):
            Month of the year. Ranges from 'jan' to 'dec'
        day (str):
            Day of the year. Ranges from 'mon' to 'sun'
        FFMC (float):
            FFMC index from the FWI system. Ranges from 18.7 to 96.20
        DMC (float):
            DMC index from the FWI system. Ranges from 1.1 to 291.3
        DC (float):
            DC index from the FWI system. Ranges from 7.9 to 860.6
        ISI (float):
            ISI index from the FWI system. Ranges from 0.0 to 56.1
        temp (float):
            Temperature in Celsius degrees. Ranges from 2.2 to 33.3
        RH (float):
            Relative humidity in %. Ranges from 15.0 to 100.0
        wind (float):
            Wind speed in km/h. Ranges from 0.4 to 9.4
        rain (float):
            Outside rain in mm/m2. Ranges from 0.0 to 6.4
    
    Targets:
        area (float):
            The burned area of the forest (in ha). Ranges from 0.00 to 1090.84

    Notes:
        The target variable is very skewed towards 0.0, thus it may make
        sense to model with the logarithm transform.

    Source:
        https://archive.ics.uci.edu/ml/datasets/Forest+Fires 
    '''

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'forest-fires/forestfires.csv'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class GasTurbine(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Condition+Based+Maintenance
        +of+Naval+Propulsion+Plants 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00316/UCI%20CBM%20Dataset.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class NewTaipeiHousing(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Real+estate+valuation+data+set 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00477/Real%20estate%20valuation%20data%20set.xlsx'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class Parkinsons(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Parkinsons+Telemonitoring 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'parkinsons/telemonitoring/parkinsons_updrs.data'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class Protein(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Physicochemical+Properties
        +of+Protein+Tertiary+Structure 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00265/CASP.csv'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class Servo(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Servo 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'servo/servo.data'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class SolarFlare(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Solar+Flare 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'solar-flare/flare.data2'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class SpaceShuttle(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Challenger+USA+Space
        +Shuttle+O-Ring 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          'space-shuttle/o-ring-erosion-only.data'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class StockPortfolio(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Stock+portfolio+performance 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00390/stock%20portfolio%20performance%20data%20set.xlsx'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class Superconduct(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Superconductivty+Data 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00464/superconduct.zip'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

class TehranHousing(BaseDataset):
    ''' 
    Data set includes construction cost, sale prices, project variables, and 
    economic variables corresponding to real estate single-family residential 
    apartments in Tehran, Iran.

    Features:
        float: 8 project physical and financial variables
        float: 19 economic variables and indices in 5 time lag numbers

    Targets:
        float: Construction cost
        float: Sale price
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Residential+Building+Data+Set 
    '''

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00437/Residential-Building-Data-Set.xlsx'

    feats = range(105)
    trgts = [105, 106]

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        df = pd.read_excel(data, dtype = float, header = [0, 1])
        return df

class Yacht(BaseDataset):
    '''
    Description

    Features:
        name (type): 
            Description

    Targets:
        name (type): 
            Description
    
    Source:
        https://archive.ics.uci.edu/ml/datasets/Yacht+Hydrodynamics 
    ''' 

    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'\
          '00243/yacht_hydrodynamics.data'

    feats = []
    trgts = []

    def _prep_data(self, data: bytes) -> pd.DataFrame:
        ''' Prepare the data set.

        Args:
            data (bytes): The raw data

        Returns:
            Pandas dataframe: The prepared data
        '''
        raise NotImplementedError

if __name__ == '__main__':
    dataset = DailyBikeSharing(use_cache = False)
    print(dataset.columns)
    print(dataset.head())
